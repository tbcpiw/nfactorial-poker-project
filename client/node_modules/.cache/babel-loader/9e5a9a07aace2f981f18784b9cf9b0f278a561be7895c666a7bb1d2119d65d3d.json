{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdum\\\\nfactorial_poker_project\\\\client\\\\src\\\\pages\\\\RoomPage.js\",\n  _s = $RefreshSig$();\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction RoomPage() {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const [roomData, setRoomData] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n\n  // Получаем данные комнаты с сервера\n  useEffect(() => {\n    const fetchRoomData = async () => {\n      const response = await fetch(`http://localhost:3001/room/${roomId}`);\n      const data = await response.json();\n      setRoomData(data); // Сохраняем данные комнаты\n      setGameStarted(data.gameStarted || false); // Если игра уже началась\n    };\n    fetchRoomData();\n  }, [roomId]);\n  const handleStartGame = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/start-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId\n        }) // Отправляем ID комнаты для старта игры\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setGameStarted(true); // Обновляем статус игры\n        setStatusMessage(data.message); // Уведомляем об успешном старте\n      } else {\n        setStatusMessage(data.message); // Показываем ошибку, если что-то пошло не так\n      }\n    } catch (error) {\n      setStatusMessage('Failed to start the game');\n      console.error('Error:', error);\n    }\n  };\n  if (!roomData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Room ID: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Players:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: roomData.players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: player\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartGame,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Game has started!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(RoomPage, \"uEuqBidL++tvBF5cJgPz396khtw=\", false, function () {\n  return [useParams];\n});\n_c = RoomPage;\nexport default RoomPage;\nvar _c;\n$RefreshReg$(_c, \"RoomPage\");","map":{"version":3,"names":["useParams","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","RoomPage","_s","roomId","roomData","setRoomData","gameStarted","setGameStarted","statusMessage","setStatusMessage","fetchRoomData","response","fetch","data","json","handleStartGame","method","headers","body","JSON","stringify","ok","message","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","players","map","player","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/abdum/nfactorial_poker_project/client/src/pages/RoomPage.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction RoomPage() {\r\n  const { roomId } = useParams();\r\n  const [roomData, setRoomData] = useState(null);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [statusMessage, setStatusMessage] = useState('');\r\n\r\n  // Получаем данные комнаты с сервера\r\n  useEffect(() => {\r\n    const fetchRoomData = async () => {\r\n      const response = await fetch(`http://localhost:3001/room/${roomId}`);\r\n      const data = await response.json();\r\n      setRoomData(data); // Сохраняем данные комнаты\r\n      setGameStarted(data.gameStarted || false); // Если игра уже началась\r\n    };\r\n\r\n    fetchRoomData();\r\n  }, [roomId]);\r\n\r\n  const handleStartGame = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/start-game', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ roomId }), // Отправляем ID комнаты для старта игры\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setGameStarted(true); // Обновляем статус игры\r\n        setStatusMessage(data.message); // Уведомляем об успешном старте\r\n      } else {\r\n        setStatusMessage(data.message); // Показываем ошибку, если что-то пошло не так\r\n      }\r\n    } catch (error) {\r\n      setStatusMessage('Failed to start the game');\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  if (!roomData) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Room ID: {roomId}</h2>\r\n      <p>Players:</p>\r\n      <ul>\r\n        {roomData.players.map((player, index) => (\r\n          <li key={index}>{player}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* Показываем кнопку только если игра ещё не началась */}\r\n      {!gameStarted ? (\r\n        <>\r\n          <button onClick={handleStartGame}>Start Game</button>\r\n          <p>{statusMessage}</p>\r\n        </>\r\n      ) : (\r\n        <p>Game has started!</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoomPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}