{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdum\\\\nfactorial_poker_project\\\\client\\\\src\\\\pages\\\\RoomPage.js\",\n  _s = $RefreshSig$();\n// client/src/pages/RoomPage.js\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\n\n// Initialize socket once\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\nfunction RoomPage() {\n  _s();\n  var _cards$find;\n  const {\n    roomId\n  } = useParams();\n  const [players, setPlayers] = useState([]);\n  const [cards, setCards] = useState([]);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n  useEffect(() => {\n    // Prompt for player's name and join room\n    const playerName = prompt('Enter your name');\n    socket.emit('join_room', {\n      roomId,\n      playerName\n    });\n    socket.emit('request_room_players', {\n      roomId\n    });\n\n    // Listen for players list updates\n    socket.on('room_players', updatedPlayers => {\n      setPlayers(updatedPlayers);\n    });\n\n    // Listen for game start event\n    socket.on('game_started', ({\n      cards\n    }) => {\n      setCards(cards);\n      setGameStarted(true);\n    });\n\n    // Listen for error messages\n    socket.on('error_message', ({\n      message\n    }) => {\n      setErrorMsg(message);\n    });\n    return () => {\n      socket.off('room_players');\n      socket.off('game_started');\n      socket.off('error_message');\n    };\n  }, [roomId]);\n  const handleStartGame = () => {\n    socket.emit('start_game', {\n      roomId\n    });\n  };\n\n  // Get current player's cards\n  const myCards = ((_cards$find = cards.find(c => c.playerId === socket.id)) === null || _cards$find === void 0 ? void 0 : _cards$find.cards) || [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Room: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Players:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: players.map(p => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: p.name\n      }, p.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), errorMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 20\n    }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartGame,\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Game has started!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Cards:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: myCards.map((card, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: card\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(RoomPage, \"hy9Rh4CehFpo28hZXwtQJOxILWw=\", false, function () {\n  return [useParams];\n});\n_c = RoomPage;\nexport default RoomPage;\nvar _c;\n$RefreshReg$(_c, \"RoomPage\");","map":{"version":3,"names":["useParams","useState","useEffect","io","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","RoomPage","_s","_cards$find","roomId","players","setPlayers","cards","setCards","gameStarted","setGameStarted","errorMsg","setErrorMsg","playerName","prompt","emit","on","updatedPlayers","message","off","handleStartGame","myCards","find","c","playerId","id","children","fileName","_jsxFileName","lineNumber","columnNumber","map","p","name","style","color","onClick","card","i","_c","$RefreshReg$"],"sources":["C:/Users/abdum/nfactorial_poker_project/client/src/pages/RoomPage.js"],"sourcesContent":["// client/src/pages/RoomPage.js\r\nimport { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\n// Initialize socket once\r\nconst socket = io('http://localhost:3001');\r\n\r\nfunction RoomPage() {\r\n  const { roomId } = useParams();\r\n  const [players, setPlayers] = useState([]);\r\n  const [cards, setCards] = useState([]);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Prompt for player's name and join room\r\n    const playerName = prompt('Enter your name');\r\n    socket.emit('join_room', { roomId, playerName });\r\n    socket.emit('request_room_players', { roomId });\r\n\r\n    // Listen for players list updates\r\n    socket.on('room_players', (updatedPlayers) => {\r\n      setPlayers(updatedPlayers);\r\n    });\r\n\r\n    // Listen for game start event\r\n    socket.on('game_started', ({ cards }) => {\r\n      setCards(cards);\r\n      setGameStarted(true);\r\n    });\r\n\r\n    // Listen for error messages\r\n    socket.on('error_message', ({ message }) => {\r\n      setErrorMsg(message);\r\n    });\r\n\r\n    return () => {\r\n      socket.off('room_players');\r\n      socket.off('game_started');\r\n      socket.off('error_message');\r\n    };\r\n  }, [roomId]);\r\n\r\n  const handleStartGame = () => {\r\n    socket.emit('start_game', { roomId });\r\n  };\r\n\r\n  // Get current player's cards\r\n  const myCards = cards.find(c => c.playerId === socket.id)?.cards || [];\r\n\r\n  return (\r\n    <div>\r\n      <h2>Room: {roomId}</h2>\r\n\r\n      <h3>Players:</h3>\r\n      <ul>\r\n        {players.map((p) => (\r\n          <li key={p.id}>{p.name}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      {errorMsg && <p style={{ color: 'red' }}>{errorMsg}</p>}\r\n\r\n      {!gameStarted ? (\r\n        <button onClick={handleStartGame}>Start Game</button>\r\n      ) : (\r\n        <>\r\n          <p>Game has started!</p>\r\n          <h3>Your Cards:</h3>\r\n          <ul>\r\n            {myCards.map((card, i) => (\r\n              <li key={i}>{card}</li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoomPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}