{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdum\\\\nfactorial_poker_project\\\\client\\\\src\\\\pages\\\\RoomPage.js\",\n  _s = $RefreshSig$();\n// client/src/pages/RoomPage.js\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\nfunction RoomPage() {\n  _s();\n  var _cards$find;\n  const {\n    roomId\n  } = useParams();\n  const [players, setPlayers] = useState([]); // Игроки из сокетов\n  const [cards, setCards] = useState([]); // Карты от сервера\n  const [statusMessage, setStatusMessage] = useState('');\n  useEffect(() => {\n    // Сначала запрашиваем текущее состояние комнаты через REST\n    fetch(`http://localhost:3001/room/${roomId}`).then(res => res.json()).then(data => {\n      setPlayers(data.players.map(p => ({\n        id: p.id,\n        name: p.name\n      })));\n      if (data.gameStarted && data.cards) {\n        setCards(data.cards);\n      }\n    }).catch(() => {/* игнорируем */});\n\n    // Подключаемся по сокетам\n    const playerName = prompt('Enter your name');\n    socket.emit('join_room', {\n      roomId,\n      playerName\n    });\n\n    // Когда сервер шлёт обновлённый список игроков\n    socket.on('room_players', updatedPlayers => {\n      setPlayers(updatedPlayers);\n    });\n\n    // Когда сервер начинает игру и рассылает карты\n    socket.on('game_started', ({\n      cards\n    }) => {\n      setCards(cards);\n      setStatusMessage('Game has started!');\n    });\n    return () => {\n      socket.off('room_players');\n      socket.off('game_started');\n      socket.disconnect();\n    };\n  }, [roomId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Room ID: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Players:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: players.map(p => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: p.name\n      }, p.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }, this), cards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Cards:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: (_cards$find = cards.find(c => c.playerId === socket.id)) === null || _cards$find === void 0 ? void 0 : _cards$find.cards.map((card, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: card\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 40\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(RoomPage, \"5h1IRjL9Hbc2xtj9z68BahDaVkI=\", false, function () {\n  return [useParams];\n});\n_c = RoomPage;\nexport default RoomPage;\nvar _c;\n$RefreshReg$(_c, \"RoomPage\");","map":{"version":3,"names":["useParams","useState","useEffect","io","jsxDEV","_jsxDEV","socket","RoomPage","_s","_cards$find","roomId","players","setPlayers","cards","setCards","statusMessage","setStatusMessage","fetch","then","res","json","data","map","p","id","name","gameStarted","catch","playerName","prompt","emit","on","updatedPlayers","off","disconnect","children","fileName","_jsxFileName","lineNumber","columnNumber","length","find","c","playerId","card","i","_c","$RefreshReg$"],"sources":["C:/Users/abdum/nfactorial_poker_project/client/src/pages/RoomPage.js"],"sourcesContent":["// client/src/pages/RoomPage.js\r\nimport { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:3001');\r\n\r\nfunction RoomPage() {\r\n  const { roomId } = useParams();\r\n  const [players, setPlayers] = useState([]);        // Игроки из сокетов\r\n  const [cards, setCards] = useState([]);            // Карты от сервера\r\n  const [statusMessage, setStatusMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Сначала запрашиваем текущее состояние комнаты через REST\r\n    fetch(`http://localhost:3001/room/${roomId}`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setPlayers(data.players.map(p => ({ id: p.id, name: p.name })));\r\n        if (data.gameStarted && data.cards) {\r\n          setCards(data.cards);\r\n        }\r\n      })\r\n      .catch(() => { /* игнорируем */ });\r\n\r\n    // Подключаемся по сокетам\r\n    const playerName = prompt('Enter your name');\r\n    socket.emit('join_room', { roomId, playerName });\r\n\r\n    // Когда сервер шлёт обновлённый список игроков\r\n    socket.on('room_players', updatedPlayers => {\r\n      setPlayers(updatedPlayers);\r\n    });\r\n\r\n    // Когда сервер начинает игру и рассылает карты\r\n    socket.on('game_started', ({ cards }) => {\r\n      setCards(cards);\r\n      setStatusMessage('Game has started!');\r\n    });\r\n\r\n    return () => {\r\n      socket.off('room_players');\r\n      socket.off('game_started');\r\n      socket.disconnect();\r\n    };\r\n  }, [roomId]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Room ID: {roomId}</h2>\r\n\r\n      <h3>Players:</h3>\r\n      <ul>\r\n        {players.map(p => (\r\n          <li key={p.id}>{p.name}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      {statusMessage && <p>{statusMessage}</p>}\r\n\r\n      {/* Отображаем свои карты, если они есть */}\r\n      {cards.length > 0 && (\r\n        <div>\r\n          <h3>Your Cards:</h3>\r\n          <ul>\r\n            {cards\r\n              .find(c => c.playerId === socket.id)\r\n              ?.cards.map((card, i) => <li key={i}>{card}</li>)}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoomPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}